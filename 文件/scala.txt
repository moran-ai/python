安装开发环境：进入官网Scala-lang.org，下载Scala
配置Scala环境变量：我的电脑，右键，属性，环境变量，将scala的路径复制过去。
查看Scala的版本信息：Scala -version
Scala 运行快捷键： Ctrl+shift+F10
Java反编译器Java Decompiler，下载地址：https://www.scala-lang.org/
配置maven本地仓库：打开IDE，进入setting，点击Bulid,Execution,Deployment，进入Bulid Tools，点击Maven
变量的声明：（1）用val声明变量，变量是不可变的；（2）用var声明变量，变量是可变的。


Scala的值类型有7种：(无引用类型)
     Byte
	 Char
	 Short
	 Int
	 Long
	 Float
	 Double




条件表达式：
    第一种：返回一种数据类型
	 val x = 3    变量x=3
	 val y = if(x > 1) 1 else -1  判断如果x>1,则变量y=1;否则变量y=-1 
	 
	第二种：混合类型的表达式,返回多种数据类型
	 val = 3
	 val y = if(x > 1) 1 else "error"  判断如果x>1,则变量y=1;否则变量y=error
	 
	第三种:省略else
	val a = if (x<1) 1    结果为Anyval=() ,scala的基类为Anyval
	完整形式：val a = if (x < 1) 1 else ()
	
	第四种：else... if ... 形式
	val b = if(x>1) 1 else if (x<1) -i else 0
	判断如果x > 1,则变量b=1,如果x<1,则变量b=-1,否则变量b=0
	




for循环：
   1 to 10 :从1到10的数
   1.to(10):从1到10的数
   1 until 10：从1到9的数
   循环:
   for (i <- 1 to 10){     i是1到10的数
   |println(i)             打印i      {代码块}  
   |}                      {}是闭包
   
   指定一个数组：val arr = Array("java","scala","C#')
   循环array这个数组，并打印出来：for(i <- arr) println(i)
   嵌套for循环：
       for(i <- 1 to 3; j <- 1 to 3 if (i != j)) println(i * 10 + j)
	   
	for循环的值：val res = for(i <- 1 until 10) yield i  
	yield 是关键字，作用是把for循环的值封装到一个集合中，并把这个集合赋值给一个变量res
	


声明方法，函数以及方法转换成函数
声明方法：
    def m1(x:Int, y:Int) : Int = x + y     Int = x + y是方法体
	调用方法：m1(3,4) 结果是Int=7 
	
声明函数：
    有变量接收的是普通函数，没有变量接收的是匿名函数.
	函数声明：val f1 = (x:Int,y:Int) => x + y      x + y是函数体
	函数调用：f1(2, 3) 结果为Int=5
	
	函数转换成方法:
                定义一个方法：def m2(f:(Int,Int) => Int) = f(3,4)
	定义一个函数：val f1=(x:Int,y:Int) => x + y
	函数转换成方法：m2(f1)    结果为：Int=7
	
	方法转换成函数：
	定义一个方法：def m1(x:Int, y:Int): Int=x + y
        方法转换成函数：val f1 = m1 _
	



数组：
   1.定长数组：长度不会改变
          val arr1 = new Array[Int](8)  整数类型
		  val arr1 = new Array[String](8)   字符串类型
		  打印出arr1中的内容：println(arr1.toBuffer) toBuffer 为一个方法
		  拿出arr1中的第一个值：println(arr1(0))
		 
   2.变长数组：
          1.导入变长数组的包：import scala.collection.mutable.ArrayBuffer
          2.创建变长数组：val arr2 = ArrayBuffer[Int]()
          3.向数组中添加元素：arr2 += 1 加入一个元素；加入多个元素：arr2 += (2,3,4);arr ++= Array(5,6);
            arr ++= ArrayBuffer(7,8)
         4.向数组中插入元素：arr2.insert(0,-1,0)  在下标为0处插入-1和0两个元素
         5.删除元素：arr2.remove(2,2) 从第二个位置开始删，删除2个元素
        6.拿出元素：for (i <- 0 until arr.length) println(arr(i))     从后往前拿出元素：for (i <- (0 until arr.length).reverse) println(arr(i))
        7.求和：arr2.sum
        8.求最大值：arr2.max
       9.排序：arr2.sorted
      10.最小值:arr2.min
	



	  
映射：
    1.创建映射：val map1 = Map('scala' -> 1,'java' -> 2,'python'->3)
	            val map2 = Map(('scala',1),('java',2),('python',3)) 元组的形式创建
    2.取出值：map1("scala")
    3.修改值：
	      * 导包：import scala.collection.mutable._
	      * 修改：val map1 = Map('scala' -> 1,'java' -> 2,'python'->3)
	         map1("scala")=6    值改为6
	         map1("scala")      打印出值
  4.设置默认值：mapl.getOrElse("c#", -1)  获取map1中的值，如果c#不存在，则输出默认值-1; getOrElse为一个方法
	

	


元组：
    1.声明元组：val t = ("scala",1,3.14,LL,("spark",4))   声明多个元组
	2.取出元组里的值:t._1    表示取出scala   "_" 表示这个元组；“1”表示下标;元组中下标从开始\
	3.声明一个数组，数组中包含多个元组：val arr = Array(("zhangsan", 23),("wangwu", 25), ("lisi", 26))
	4.数组转换为映射：arr.toMap    toMap 是一个操作
	5.拉链操作：
	         1.声明两个数组：
		        * val arr1 = Array("zhangsan", "wangwu", "lisi')  姓名
	                * val arr2 = Array(24, 25, 26)                    年龄
	         2.拉链操作：arr1 zip arr2 或者 arr1.zip(arr2)或 arr1 zip arr2   zip 是一个方法


			 
	
    	
	
	      
	
	